{"version":3,"sources":["E:/workspace/message/src/types.ts","E:/workspace/message/src/StatefulMessageArray.ts","E:/workspace/message/src/components/MessageListWrapper.tsx","E:/workspace/message/src/components/Message.tsx","E:/workspace/message/src/components/MessageIcon.tsx","E:/workspace/message/src/components/MessageList.tsx","E:/workspace/message/src/renderMessages.tsx","E:/workspace/message/src/helpers/uuid.ts","E:/workspace/message/src/MessageManager.ts","E:/workspace/message/src/index.ts","E:/workspace/message/docs/ThemeButtons.tsx","E:/workspace/message/docs/index.mdx"],"names":["MessageType","StatefulMessageArray","max","callback","messages","hideMessageTimeoutIds","message","this","filter","item","key","removeOverRangeMessages","clearTimeout","duration","window","setTimeout","remove","messageKey","clearMessageTimeout","needUpdate","length","newBegin","slice","forEach","MessageListWrapper","styled","div","props","theme","zIndex","snackbar","typography","body1","fontSize","fontFamily","palette","text","primary","Message","background","paper","shadows","DenseIcon","Icon","DenseProgress","Progress","renderIcon","type","success","error","warning","MessageIcon","loading","size","thickness","color","info","MessageList","TransitionGroup","component","map","Slide","appear","timeout","in","direction","content","id","rootElement","renderMessages","ReactDOM","render","document","getElementById","createElement","setAttribute","body","append","count","uuid","reset","isNumber","test","MessageManager","settings","showMessage","messageConfig","add","handleMessageUpdate","bind","defaultTheme","newSettings","Object","assign","setMax","items","Wrapper","Content","colors","selected","ThemeButtons","useState","selectedColor","setSelectedColor","handleClick","useCallback","createPalette","setTheme","createTheme","onClick","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","alt","src","__position","__code","__scope","Playground","Button","style","display","hide","Promise","resolve","reject","then","config","isMDXComponent"],"mappings":"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","file":"static/js/docs-index.c4a65df5.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\n/**\n * 消息配置\n */\nexport interface MessageConfig {\n  /**\n   * 消息显示时长\n   */\n  duration?: number;\n  /**\n   * 消息主键\n   */\n  key?: string;\n}\n\n/**\n * 整个消息模块的配置\n */\nexport interface Settings {\n  /**\n   * 消息显示时长\n   */\n  duration?: number;\n  /**\n   * 消息显示最大个数\n   */\n  max?: number;\n}\n\nexport enum MessageType {\n  info = 'info',\n  success = 'success',\n  error = 'error',\n  loading = 'loading',\n  warning = 'warning',\n}\n\n/**\n * 消息接口\n */\nexport interface MessageInterface {\n  /**\n   * 消息类型\n   *\n   * @type {('info' | 'loading' | 'warning' | 'success' | 'error')}\n   * @memberof MessageInterface\n   */\n  type: MessageType;\n  /**\n   * 消息显示时长\n   *\n   * @type {number}\n   * @memberof MessageInterface\n   */\n  duration: number;\n  /**\n   * 消息内容\n   *\n   * @type {React.ReactNode}\n   */\n  content: React.ReactNode;\n  /**\n   * 消息主键\n   */\n  key: string;\n}\n","/**\n * 有状态的消息\n */\ninterface StatefulMessage {\n  /**\n   * 消息标识\n   */\n  key: string;\n  /**\n   * 消息显示时长\n   */\n  duration: number;\n}\n\n/**\n * 有状态的消息列表\n *\n * **消息超时则自动删除。**\n */\nclass StatefulMessageArray<T extends StatefulMessage> {\n  /**\n   * 消息列表\n   */\n  public messages: T[] = [];\n\n  /**\n   * 隐藏消息的定时器\n   */\n  private hideMessageTimeoutIds: {\n    [key: string]: number;\n  } = {};\n\n  // eslint-disable-next-line no-useless-constructor\n  public constructor(\n    private max: number,\n    private callback: (messages: T[]) => void,\n  ) {}\n\n  /**\n   * 添加消息\n   *\n   * @param {T} message 消息\n   */\n  public add(message: T) {\n    this.messages = [\n      ...this.messages.filter((item) => item.key !== message.key),\n      message,\n    ];\n\n    this.removeOverRangeMessages();\n\n    clearTimeout(this.hideMessageTimeoutIds[message.key]);\n\n    if (message.duration > 0) {\n      this.hideMessageTimeoutIds[message.key] = window.setTimeout(() => {\n        this.remove(message.key);\n      }, message.duration);\n    }\n\n    this.callback(this.messages);\n\n    return () => this.remove(message.key);\n  }\n\n  /**\n   * 删除消息\n   *\n   * @param messageKey 消息主键\n   */\n  public remove(messageKey: string) {\n    this.messages = this.messages.filter((item) => item.key !== messageKey);\n    this.clearMessageTimeout(messageKey);\n    this.callback(this.messages);\n  }\n\n  /**\n   * 设置最大展现的消息数目\n   *\n   * @param {number} max 最大展现的消息数目\n   */\n  public setMax(max: number) {\n    this.max = max;\n    const needUpdate = this.messages.length > this.max;\n    this.removeOverRangeMessages();\n    if (needUpdate) {\n      this.callback(this.messages);\n    }\n  }\n\n  /**\n   * 清除超出消息条数限制的消息\n   */\n  private removeOverRangeMessages() {\n    if (this.messages.length > this.max) {\n      const newBegin = this.messages.length - this.max;\n      this.messages.slice(0, newBegin).forEach((item) => {\n        this.clearMessageTimeout(item.key);\n      });\n      this.messages = this.messages.slice(newBegin);\n    }\n  }\n\n  /**\n   * 清除隐藏消息的定时器\n   *\n   * @private\n   * @param {string} messageKey 消息主键\n   */\n  private clearMessageTimeout(messageKey: string) {\n    clearTimeout(this.hideMessageTimeoutIds[messageKey]);\n    delete this.hideMessageTimeoutIds[messageKey];\n  }\n}\n\nexport default StatefulMessageArray;\n","import styled from 'styled-components';\n\nconst MessageListWrapper = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 8px;\n  margin-top: -40px;\n  top: 16px;\n  right: 0;\n  left: 0;\n  z-index: ${(props) => props.theme.zIndex.snackbar};\n  line-height: 1.5;\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  color: ${(props) => props.theme.palette.text.primary};\n  pointer-events: none;\n  box-sizing: border-box;\n`;\n\nexport default MessageListWrapper;\n","import styled from 'styled-components';\n\nconst Message = styled.div`\n  display: inline-flex;\n  align-items: flex-start;\n  padding: 10px 16px;\n  margin: 4px 0;\n  background-color: ${(props) => props.theme.palette.background.paper};\n  box-shadow: ${(props) => props.theme.shadows[1]};\n  border-radius: 4px;\n  pointer-events: all;\n`;\n\nexport default Message;\n","import React from 'react';\nimport Icon from 'sinoui-components/Icon';\nimport { MdInfo, MdWarning, MdCheckCircle, MdError } from 'react-icons/md';\nimport styled from 'styled-components';\nimport Progress from 'sinoui-components/Progress';\nimport { MessageType } from '../types';\n\nconst DenseIcon = styled(Icon)`\n  font-size: 16px;\n  margin-right: 8px;\n  display: inline-flex;\n  height: 20px;\n  align-items: center;\n`;\n\nconst DenseProgress = styled(Progress)`\n  margin-right: 8px;\n  margin-top: 3px;\n`;\n\nconst renderIcon = (type: MessageType) => {\n  switch (type) {\n    case MessageType.success:\n      return <MdCheckCircle />;\n    case MessageType.error:\n      return <MdError />;\n    case MessageType.warning:\n      return <MdWarning />;\n    default:\n      return <MdInfo />;\n  }\n};\n\nfunction MessageIcon({ type }: { type: MessageType }) {\n  return type === MessageType.loading ? (\n    <DenseProgress size={16} thickness={1.5} />\n  ) : (\n    <DenseIcon color={type === MessageType.info ? 'primary' : type}>\n      {renderIcon(type)}\n    </DenseIcon>\n  );\n}\n\nexport default MessageIcon;\n","import React from 'react';\nimport Slide from 'sinoui-components/transitions/Slide';\nimport { TransitionGroup } from 'react-transition-group';\nimport { MessageInterface } from '../types';\nimport MessageListWrapper from './MessageListWrapper';\nimport Message from './Message';\nimport MessageIcon from './MessageIcon';\n\nfunction MessageList({ messages }: { messages: MessageInterface[] }) {\n  return (\n    <TransitionGroup component={MessageListWrapper}>\n      {messages.map((message) => (\n        <Slide key={message.key} appear timeout={300} in direction=\"down\">\n          <Message>\n            <MessageIcon type={message.type} />\n            <div>{message.content}</div>\n          </Message>\n        </Slide>\n      ))}\n    </TransitionGroup>\n  );\n}\n\nexport default MessageList;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Theme } from '@sinoui/theme';\nimport { MessageInterface } from './types';\nimport MessageList from './components/MessageList';\n\nexport const id = 'sinoui-global-message';\nlet rootElement: HTMLElement | null = null;\n\nfunction getOrCreateRootElement() {\n  if (!rootElement) {\n    rootElement = document.getElementById(id);\n    if (!rootElement) {\n      rootElement = document.createElement('div');\n      rootElement.setAttribute('id', id);\n      document.body.append(rootElement);\n    }\n  }\n  return rootElement;\n}\n\n/**\n * 渲染消息\n *\n * @param messages 消息列表\n */\nexport default function renderMessages(\n  messages: MessageInterface[],\n  theme: Theme,\n) {\n  ReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <MessageList messages={messages} />\n    </ThemeProvider>,\n    getOrCreateRootElement(),\n  );\n}\n","let count = 0;\n\n/**\n * 生成新的标签id\n */\nfunction uuid() {\n  const id = count;\n  count += 1;\n  return `message-${id}`;\n}\n\n/**\n *  重置计数器\n */\nexport function reset() {\n  count = 0;\n}\n\nexport default uuid;\n","/* eslint-disable no-dupe-class-members */\nimport { Theme, defaultTheme } from '@sinoui/theme';\nimport StatefulMessageArray from './StatefulMessageArray';\nimport {\n  MessageInterface,\n  Settings,\n  MessageConfig,\n  MessageType,\n} from './types';\nimport renderMessages from './renderMessages';\nimport uuid from './helpers/uuid';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isNumber(test: any): test is number {\n  return typeof test === 'number';\n}\n\n/**\n * 消息管理器\n */\nclass MessageManager {\n  /**\n   * 消息列表\n   */\n  private messages: StatefulMessageArray<MessageInterface>;\n\n  /**\n   * 全局设置\n   */\n  private settings = {\n    max: 10,\n    duration: 3000,\n  };\n\n  /**\n   * 主题\n   */\n  private theme: Theme;\n\n  public constructor() {\n    this.messages = new StatefulMessageArray(\n      this.settings.max,\n      this.handleMessageUpdate.bind(this),\n    );\n\n    this.theme = defaultTheme;\n  }\n\n  /**\n   * 处理消息更新事件\n   */\n  private handleMessageUpdate() {\n    renderMessages(this.messages.messages, this.theme);\n  }\n\n  /**\n   * 添加全局配置\n   *\n   * @param {Settings} newSettings 新的配置\n   */\n  public config(newSettings: Settings) {\n    Object.assign(this.settings, newSettings);\n    this.messages.setMax(this.settings.max);\n  }\n\n  /**\n   * 设置主题\n   * @param theme 主题\n   */\n  public setTheme(theme: Theme) {\n    this.theme = theme;\n    this.handleMessageUpdate();\n  }\n\n  /**\n   * 展示消息\n   * @param type 消息类型\n   */\n  private showMessage = (type: MessageType) => {\n    /**\n     * @param content 消息内容\n     * @param duration 消息显示时长或者配置\n     */\n    const fn = (\n      content: React.ReactNode,\n      duration: number | MessageConfig = this.settings.duration,\n    ) => {\n      const messageConfig = isNumber(duration) ? { duration } : duration;\n      const key = messageConfig.key || uuid();\n      const message = {\n        ...messageConfig,\n        type,\n        key,\n        content,\n        duration: isNumber(messageConfig.duration)\n          ? messageConfig.duration\n          : this.settings.duration,\n      };\n\n      return this.messages.add(message);\n    };\n\n    return fn;\n  };\n\n  /**\n   * 展示 info 级别的消息\n   */\n  public info = this.showMessage(MessageType.info);\n\n  /**\n   * 展示 error 级别的消息\n   */\n  public error = this.showMessage(MessageType.error);\n\n  /**\n   * 展示 warning 级别的消息\n   */\n  public warning = this.showMessage(MessageType.warning);\n\n  /**\n   * 展示 success 级别的消息\n   */\n  public success = this.showMessage(MessageType.success);\n\n  /**\n   * 展示 loading 级别的消息\n   */\n  public loading = this.showMessage(MessageType.loading);\n}\n\nexport default MessageManager;\n","import MessageManager from './MessageManager';\n\nconst message = new MessageManager();\n\nexport default message;\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { colors, createPalette, createTheme } from '@sinoui/theme';\nimport message from '../src';\n\nconst items = ['pink', 'purple', 'teal', 'blue'];\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst Content = styled.div<{ selected?: boolean }>`\n  height: 60px;\n  width: 60px;\n  margin: 4px;\n  background-color: ${(props) => colors[props.color][500]};\n  ${(props) =>\n    props.selected && `-webkit-box-shadow: 0 0 5px rgba(0, 113, 241, 1);`};\n`;\n\nfunction ThemeButtons() {\n  const [selectedColor, setSelectedColor] = useState('');\n  const handleClick = useCallback((color) => {\n    setSelectedColor(color);\n    if (color === 'purple') {\n      const palette = createPalette({ primary: colors[color], type: 'dark' });\n      message.setTheme(createTheme({ palette }));\n    } else {\n      const palette = createPalette({ primary: colors[color] });\n      message.setTheme(createTheme({ palette }));\n    }\n  }, []);\n  return (\n    <Wrapper>\n      {items.map((item) => (\n        <Content\n          color={item}\n          onClick={() => handleClick(item)}\n          selected={item === selectedColor}\n        />\n      ))}\n    </Wrapper>\n  );\n}\n\nexport default ThemeButtons;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport message from '../src';\nimport { Playground } from 'docz';\nimport Button from 'sinoui-components/Button';\nimport ThemeButtons from './ThemeButtons';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"sinouimessage\"\n    }}>{`@sinoui/message`}</h1>\n    <p>{`全局提示信息。`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinoui/message\"\n      }}><img alt=\"npm version\" src=\"https://img.shields.io/npm/v/@sinoui/message\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinoui/message\"\n      }}><img alt=\"downloads\" src=\"https://img.shields.io/npm/dm/@sinoui/message\" /></a></p>\n    <h2 {...{\n      \"id\": \"依赖安装\"\n    }}>{`依赖安装`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinoui/message\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"入门示例\"\n    }}>{`入门示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport message from '@sinoui/message';\n\nfunction Demo() {\n  const handleClick = () => {\n    message.info('这是一条提示消息');\n  };\n\n  return <Button onClick={handleClick}>显示消息</Button>;\n}\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const handleClick = () => {\\n    message.info(\\'这是一条提示消息\\')\\n  }\\n  return <Button onClick={handleClick}>显示消息</Button>\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        const handleClick = () => {\n          message.info('这是一条提示消息');\n        };\n\n        return <Button onClick={handleClick} mdxType=\"Button\">显示消息</Button>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"不同类型的消息提示\"\n    }}>{`不同类型的消息提示`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const success = () => {\\n    message.success(\\'保存成功\\')\\n  }\\n\\n  const error = () => {\\n    message.error(\\'保存失败\\')\\n  }\\n\\n  const warning = () => {\\n    message.warning(\\'表单字段填写不完整\\')\\n  }\\n\\n  const info = () => {\\n    message.info(\\'请确认提交信息\\')\\n  }\\n  const loading = () => {\\n    message.loading(\\'数据正在加载中...\\')\\n  }\\n\\n  return (\\n    <div style={{ display: \\'flex\\' }}>\\n      <Button onClick={loading}>loading</Button>\\n      <Button onClick={info}>info</Button>\\n      <Button onClick={warning}>warning</Button>\\n      <Button onClick={error}>error</Button>\\n      <Button onClick={success}>success</Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        const success = () => {\n          message.success('保存成功');\n        };\n\n        const error = () => {\n          message.error('保存失败');\n        };\n\n        const warning = () => {\n          message.warning('表单字段填写不完整');\n        };\n\n        const info = () => {\n          message.info('请确认提交信息');\n        };\n\n        const loading = () => {\n          message.loading('数据正在加载中...');\n        };\n\n        return <div style={{\n          display: 'flex'\n        }}>\n    <Button onClick={loading} mdxType=\"Button\">loading</Button>\n    <Button onClick={info} mdxType=\"Button\">info</Button>\n    <Button onClick={warning} mdxType=\"Button\">warning</Button>\n    <Button onClick={error} mdxType=\"Button\">error</Button>\n    <Button onClick={success} mdxType=\"Button\">success</Button>\n  </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"长时间显示-loading-提示\"\n    }}>{`长时间显示 loading 提示`}</h2>\n    <p><inlineCode parentName=\"p\">{`loading`}</inlineCode>{`一般用于资源加载中提示，加载完成才会消失。此时我们只需要在使用`}<inlineCode parentName=\"p\">{`message.loading()`}</inlineCode>{`时，指定第二个参数为 0 即可保证`}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{`提示不会自动关闭。\n但在加载完成后一定要调用`}<inlineCode parentName=\"p\">{`hide()`}</inlineCode>{`让其关闭。具体示例如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import message from '@sinoui/message';\n\nfunction save() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('保存成功');\n    }, 1000);\n  });\n}\n\nfunction Demo() {\n  const handleClick = () => {\n    const hide = message.loading('数据正在提交，请稍后...', 0);\n    save()\n      .then(() => {\n        hide();\n        message.success('保存成功');\n      })\n      .catch((error) => {\n        hide();\n        message.error('保存失败');\n      });\n  };\n\n  return <Button onClick={handleClick}>保存</Button>;\n}\n`}</code></pre>\n    <Playground __position={2} __code={'() => {\\n  function save() {\\n    return new Promise((resolve, reject) => {\\n      setTimeout(() => {\\n        resolve(\\'保存成功\\')\\n      }, 1000)\\n    })\\n  }\\n\\n  const handleClick = () => {\\n    const hide = message.loading(\\'数据正在提交，请稍后...\\', 0)\\n    save()\\n      .then(() => {\\n        hide()\\n        message.success(\\'保存成功\\')\\n      })\\n      .catch(error => {\\n        hide()\\n        message.error(\\'保存失败\\')\\n      })\\n  }\\n\\n  return <Button onClick={handleClick}>保存</Button>\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        function save() {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              resolve('保存成功');\n            }, 1000);\n          });\n        }\n\n        const handleClick = () => {\n          const hide = message.loading('数据正在提交，请稍后...', 0);\n          save().then(() => {\n            hide();\n            message.success('保存成功');\n          }).catch(error => {\n            hide();\n            message.error('保存失败');\n          });\n        };\n\n        return <Button onClick={handleClick} mdxType=\"Button\">保存</Button>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置消息显示时长\"\n    }}>{`设置消息显示时长`}</h2>\n    <p><inlineCode parentName=\"p\">{`message`}</inlineCode>{`相关提示 API 支持自定义显示时长，默认为 3000 毫秒。`}</p>\n    <Playground __position={3} __code={'() => {\\n  const loading = () => {\\n    message.loading(\\'数据正在加载中...\\')\\n  }\\n\\n  const loading1 = () => {\\n    message.loading(\\'数据加载中，1s后消失...\\', 1000)\\n  }\\n\\n  const loading2 = () => {\\n    message.loading(\\'数据加载中，10s后消失...\\', { duration: 10000 })\\n  }\\n\\n  return (\\n    <div style={{ display: \\'flex\\' }}>\\n      <Button onClick={loading}>默认时长</Button>\\n      <Button onClick={loading1}>1000ms</Button>\\n      <Button onClick={loading2}>10s</Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        const loading = () => {\n          message.loading('数据正在加载中...');\n        };\n\n        const loading1 = () => {\n          message.loading('数据加载中，1s后消失...', 1000);\n        };\n\n        const loading2 = () => {\n          message.loading('数据加载中，10s后消失...', {\n            duration: 10000\n          });\n        };\n\n        return <div style={{\n          display: 'flex'\n        }}>\n    <Button onClick={loading} mdxType=\"Button\">默认时长</Button>\n    <Button onClick={loading1} mdxType=\"Button\">1000ms</Button>\n    <Button onClick={loading2} mdxType=\"Button\">10s</Button>\n  </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置消息显示最大条数\"\n    }}>{`设置消息显示最大条数`}</h2>\n    <p>{`消息显示最大条数默认为 10 条，可以使用`}<inlineCode parentName=\"p\">{`message.config()`}</inlineCode>{`自定义最大条数。`}</p>\n    <Playground __position={4} __code={'() => {\\n  message.config({ max: 20 })\\n  const handleClick = () => {\\n    message.info(\\'这是一条提示消息\\')\\n  }\\n  return <Button onClick={handleClick}>显示消息</Button>\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        message.config({\n          max: 20\n        });\n\n        const handleClick = () => {\n          message.info('这是一条提示消息');\n        };\n\n        return <Button onClick={handleClick} mdxType=\"Button\">显示消息</Button>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"消息替换\"\n    }}>{`消息替换`}</h2>\n    <p>{`可以使用 key 值替换消息。具体用法类似于：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import message from '@sinoui/message';\n\nfunction save() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('保存成功');\n    }, 1000);\n  });\n}\n\nfunction Demo() {\n  const handleClick = () => {\n    message.loading('数据正在提交，请稍后...', { key: '001', duration: 0 });\n    save()\n      .then(() => {\n        message.success('保存成功', { key: '001' });\n      })\n      .catch((error) => {\n        message.error('保存失败', { key: '001' });\n      });\n  };\n\n  return <Button onClick={handleClick}>保存</Button>;\n}\n`}</code></pre>\n    <Playground __position={5} __code={'() => {\\n  function save() {\\n    return new Promise((resolve, reject) => {\\n      setTimeout(() => {\\n        resolve(\\'保存成功\\')\\n      }, 1000)\\n    })\\n  }\\n\\n  const handleClick = () => {\\n    message.loading(\\'数据正在提交，请稍后...\\', { key: \\'001\\', duration: 0 })\\n    save()\\n      .then(() => {\\n        message.success(\\'保存成功\\', { key: \\'001\\' })\\n      })\\n      .catch(error => {\\n        message.error(\\'保存失败\\', { key: \\'001\\' })\\n      })\\n  }\\n  return <Button onClick={handleClick}>保存</Button>\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        function save() {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              resolve('保存成功');\n            }, 1000);\n          });\n        }\n\n        const handleClick = () => {\n          message.loading('数据正在提交，请稍后...', {\n            key: '001',\n            duration: 0\n          });\n          save().then(() => {\n            message.success('保存成功', {\n              key: '001'\n            });\n          }).catch(error => {\n            message.error('保存失败', {\n              key: '001'\n            });\n          });\n        };\n\n        return <Button onClick={handleClick} mdxType=\"Button\">保存</Button>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"主题切换\"\n    }}>{`主题切换`}</h2>\n    <p>{`使用`}<inlineCode parentName=\"p\">{`message.setTheme(theme)`}</inlineCode>{`的方式切换主题。`}</p>\n    <Playground __position={6} __code={'() => {\\n  const handleClick = () => {\\n    message.info(\\'这是一条普通的提示消息\\')\\n  }\\n  return (\\n    <>\\n      <ThemeButtons />\\n      <Button onClick={handleClick}>显示消息</Button>\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      message,\n      Playground,\n      Button,\n      ThemeButtons\n    }} mdxType=\"Playground\">\n  {() => {\n        const handleClick = () => {\n          message.info('这是一条普通的提示消息');\n        };\n\n        return <>\n    <ThemeButtons mdxType=\"ThemeButtons\" />\n    <Button onClick={handleClick} mdxType=\"Button\">显示消息</Button>\n  </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`组件提供了一些静态方法，使用方式和参数可参考如下：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.info(content,config)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.success(content,config)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.error(content,config)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.warning(content,config)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.loading(content,config)`}</inlineCode></li>\n    </ul>\n    <p>{`参数解析：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数名称`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`说明`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React.ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息内容`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`config`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}{`|`}{`{key:string,duration:number}`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息配置。如果是`}<inlineCode parentName=\"td\">{`number`}</inlineCode>{`类型表示消息显示时长，以`}<inlineCode parentName=\"td\">{`ms`}</inlineCode>{`为单位；当值为`}<inlineCode parentName=\"td\">{`0`}</inlineCode>{`时，表示消息不会自动消失。也可以是消息配置，包括`}<inlineCode parentName=\"td\">{`key`}</inlineCode>{`值和显示时长。`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"全局配置-api\"\n    }}>{`全局配置 API`}</h2>\n    <p>{`除了上述提到的几个静态方法外，`}<inlineCode parentName=\"p\">{`message`}</inlineCode>{`还有两个设置全局配置的 API：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.config({max,duration})`}</inlineCode>{` 全局设置默认的最大消息条数和显示时长`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`message.setTheme(theme)`}</inlineCode>{` 全局设置主题`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}